name: Build and Deploy

on:
  push:
    branches: [ main ]

# Solo lo mínimo para este job (el push a GHCR va con tu PAT)
permissions:
  contents: read
  packages: write

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout app repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install
        run: npm ci

      - name: Build
        run: npm run build

      - name: Extract version & name
        run: |
          VERSION=$(node -p "require('./package.json').version")
          APP_NAME=$(node -p "require('./package.json').name")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      # ---------- Push de la imagen a GHCR con tu PAT ----------
      - name: Login GHCR (PAT)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ env.VERSION }}

      # ---------- Bump en repo de deployments (fuente de verdad) ----------
      - name: Checkout deployments repo
        uses: actions/checkout@v4
        with:
          repository: asixc/deployments
          token: ${{ secrets.DEPLOYMENTS_PAT }}     # Fine-grained PAT con Contents: Read & Write
          path: deployments-repo

      - name: Update image tag in docker-compose.yml
        working-directory: deployments-repo
        run: |
          set -euo pipefail
          FILE="docker-compose.yml"   # ajusta si está en otra ruta
          IMAGE="ghcr.io/${{ github.repository }}:${{ env.VERSION }}"
          if [ ! -f "$FILE" ]; then
            echo "ERROR: $FILE no existe"; ls -la; exit 1
          fi
          # Cambia cualquier línea 'image: ghcr.io/<algo>:<tag>' por la nueva imagen
          sed -i -E "s|(image:\s*)ghcr\.io/.+:\S+|\1${IMAGE}|g" "$FILE"

          git config user.name "ci-bot"
          git config user.email "ci-bot@users.noreply.github.com"
          git add "$FILE"
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "ci: bump ${{ env.APP_NAME }} to v${{ env.VERSION }}"
            git push origin HEAD:main
          fi

      # ---------- known_hosts opcional (sin if: con secrets) ----------
      - name: Prepare known_hosts
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          if [ -n "${{ secrets.SSH_KNOWN_HOSTS }}" ]; then
            echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          else
            touch ~/.ssh/known_hosts
          fi
          chmod 600 ~/.ssh/known_hosts

      # ---------- Deploy: el servidor solo hace pull + compose ----------
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          debug: true
          script: |
            set -euo pipefail

            DIR="${{ secrets.PATH_DEPLOYMENTS }}"
            if [ -z "${DIR}" ] || [ ! -d "${DIR}" ]; then
              echo "ERROR: PATH_DEPLOYMENTS inválido o no existe: ${DIR}"
              exit 1
            fi

            cd "${DIR}"
            git pull

            # Si la imagen GHCR es PRIVADA y has creado estos secretos, haz login de lectura
            if [ -n "${{ secrets.GHCR_READ_USER }}" ] && [ -n "${{ secrets.GHCR_READ_PAT }}" ]; then
              echo "Login en GHCR (read-only) en el servidor…"
              docker login ghcr.io -u "${{ secrets.GHCR_READ_USER }}" -p "${{ secrets.GHCR_READ_PAT }}"
            else
              echo "Saltando docker login en servidor (imagen pública o sin secretos)."
            fi

            # Lanza el servicio (ajusta 'kcomemos' si tu servicio se llama distinto)
            docker compose pull kcomemos || true
            docker compose up -d kcomemos

            docker image prune -f || true